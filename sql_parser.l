

%{
#include <iostream>
#include <iomanip>
#include "sql_parser.tab.h"      // file generated by Bison
using namespace std;

int line_num = 1;      // to keep line numbers

// Function prototype
 void writeToken(const char* toktype);

%}
%option noyywrap

WHITE      [ \t]
DIGIT      [0-9]
ALPHA      [a-zA-Z]
ALPHANUM   [a-zA-Z0-9_]

%%

{WHITE}		; /* eat whitespace */
\n 			; /* eat newlines */

	/* KEYWORDS */

"SELECT"		{writeToken("K_SEL"); return K_SEL;}
"FROM"			{writeToken("K_FRM"); return K_FRM;}
"WHERE"			{writeToken("K_WHR"); return K_WHR;}
"GROUP BY"		{writeToken("K_GBY"); return K_GBY;}
"HAVING"		{writeToken("K_HVG"); return K_HVG;}
"ORDER BY"		{writeToken("K_OBY"); return K_OBY;}
"UNION"			{writeToken("K_UNI"); return K_UNI;}
"INTERSECT"		{writeToken("K_INT"); return K_INT;}
"AS"			{writeToken("K_AS"); return K_AS;}
"IN"|"NOT IN"	{writeToken("K_IN"); return K_IN;}
"EXISTS"|"NOT EXISTS"		{writeToken("K_EXS"); return K_EXS;}
"AND"|"OR"					{writeToken("K_CHAIN"); return K_CHAIN;}
"SUM"|"COUNT"|"MIN"|"MAX"|"AVG"		{writeToken("K_AGR"); return K_AGR;}
"("			{writeToken("K_LPAR"); return K_LPAR;}
")"			{writeToken("K_RPAR"); return K_RPAR;}
","			{writeToken("K_COM"); return K_COM;}


	/* COMPLEX TOKENS */

{ALPHA}{ALPHANUM}*(\.{ALPHA}{ALPHANUM}*)?	{writeToken("T_COL"); return T_COL;}
[-]?{DIGIT}+(\.{DIGIT})? 	{writeToken("T_NUM"); return T_NUM;}
(\"[^\s\n"]*\"|'[^\s\n']*')				{writeToken("T_STR"); return T_STR;}
"+"|"-"|"*"|"/"				{writeToken("T_ARTH_OP"); return T_ARTH_OP;}
"="|"<"|">"|"<="|">="|"<>"	{writeToken("T_COMP_OP"); return T_COMP_OP;}

%%

void writeToken(const char* toktype)
{
  cout << "TOKEN: ";
  cout << left << setw(14) << toktype;
  cout << "LEXEME: " << yytext << endl;
}